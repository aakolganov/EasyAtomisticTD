from scipy.interpolate import interp1d
import numpy as np
# Here all the T/D data is defined: T in K, H in kJ/mol, S in J/(mol*K)
Temp = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900,
        2000]

H_data = {'H2O':[-9.904, -6.615, -3.282, 0.062, 3.452, 6.925,10.501,14.192,18.002,21.938,26.000,30.191,34.506,38.942,43.493,48.151,52.908,57.758,62.693,67.706,72.790],
          'H2': [-8.467, -5.468, -2.774, 0.053, 2.959, 5.882, 8.811, 11.749, 14.702, 17.676, 20.680, 23.719, 26.797,29.918,33.082,36.290,39.541,42.835,46.169,49.541,52.951],
          'NH3': [-10.045, -6.737, -3.394, 0.066, 3.781, 7.819, 12.188, 16.872, 21.853, 27.113, 32.637,38.406, 44.402, 50.609, 57.008, 63.582, 70.315, 77.193, 84.201, 91.328, 98.561],
          'CO': [-8.671, -5.769, -2.858, 0.054, 2.976, 5.931, 8.942, 12.023, 15.177, 18.401, 21.690,
        25.035, 28.430, 31.868, 35.343, 38.850, 42.385, 45.945, 49.526, 53.126, 56.744],
          'N2': [-8.670, -5.768, -2.857, 0.054, 2.971, 5.911, 8.894, 11.937, 15.046, 18.223, 21.463,
        24.760, 28.109, 31.503, 34.936, 38.405, 41.904, 45.429, 48.978, 52.548, 56.137],
          'CH4': [-10.024, -6.698, -3.368, 0.066, 3.861, 8.200, 13.130, 18.635, 24.675, 31.205, 38.179, 45.549, 53.270, 61.302, 69.608, 78.153, 86.910, 95.853, 104.960, 114.212, 123.592],
          'H':[-6.197, -4.119, -2.040, 0.038, 2.117, 4.196, 6.274, 8.353, 10.431, 12.510, 14.589, 16.667, 18.746, 20.824, 22.903, 24.982, 27.060,29.139,31.217,33.296,35.375],
          'OH': [-9.172, -6.139, -2.976, 0.055,  3.035, 5.992, 8.943, 11.902, 14.880, 17.888, 20.935, 24.024,27.160,30.342,33.569,36.839,40.151,43.502,46.889,50.310,53.762]
          }

S_data = {'H2O': [0.0, 33.299, 33.349,33.596,34.262,35.226,36.325,37.495,38.721,39.987,41.268,42.536,
         43.768,44.945,46.054,47.090,48.050,48.935,49.749,50.496,51.180],
          'H2': [0, 100.727, 119.412, 130.858, 139.216, 145.737, 151.077, 155.606, 159.548, 163.051, 166.216,169.112,171.790,174.288,176.633,178.846,180.944,182.940,184.846,186.669,188.418],
          'NH3':  [0, 155.840, 178.990, 192.995, 203.663, 212.659, 220.615, 227.829, 234.47, 240.669, 246.486,251.983, 257.199, 262.166, 266.907, 271.442, 275.788, 279.957, 283.962, 287.815, 291.525],
          'CO':[0.000, 165.850, 186.025, 197.833, 206.238, 212.831, 218.319, 223.066, 227.277, 231.074, 234.538, 237.726, 240.679, 243.431, 246.006, 248.426, 250.707, 252.865, 254.912, 256.859, 258.714],
          'N2':[0, 159.811, 179.985, 191.789, 200.181, 206.739, 212.176, 216.866, 221.017, 224.757, 228.170, 231.313, 234.226, 236.943, 239.487, 241.880, 244.138, 246.275, 248.304, 250.234, 252.074],
          'CH4': [0.0, 149.500, 172.577, 186.472, 197.356, 207.014, 215.987, 224.461, 232.518, 240.205, 247.549, 254.570, 261.287, 267.714, 273.868, 279.763, 285.413, 290.834, 296.039, 301.041, 305.853],
          'H':[0.0, 92.009, 106.417,114.845, 120.825, 125.463, 129.253, 132.457, 135.232, 137.681, 139.871, 141.852, 143.660, 145.324, 146.865, 148.299, 149.640,150.900,152.088,153.212, 154.278],
          'OH': [0.0, 149.590, 171.592, 183.894, 192.466, 199.066, 204.447, 209.007, 212.983, 216.526, 219.736, 222.680, 225.408, 227.955, 230.346, 232.602, 234.740,236.771,
        238.707,240.557,242.327]
          }

#Now we are interpolating data / cubic splines
new_temperatures = np.linspace(min(Temp), max(Temp), num=100)  # a list of temperatures to interpolate


# Interpolation function
def interpolation(T, term_f, T_value):
    interp_func = interp1d(T, term_f, kind='cubic', fill_value="extrapolate")
    return interp_func(T_value)


# Enthalpy and entropy functions
def enthalpy(compound, T_value):
    return interpolation(Temp, H_data[compound], T_value)


def entropy(compound, T_value):
    return interpolation(Temp, S_data[compound], T_value)


R_const = 8.31 / 1000  # J /K mol / 1000 = kJ /K mol
p0_const = 0.986923169314

#Chemical potentials as the function of pressure and temperature
def Chem_pot(T, p, compound):
    pressure = p / p0_const
    delta_mu = ((enthalpy(compound, T) - enthalpy(compound, 0)) - (
                T * (entropy(compound, T) - entropy(compound, 0)) / 1000) + R_const * T * np.log(pressure)) / 96.485
    #if compound == 'H2':
    #    delta_mu = delta_mu/2
    return delta_mu

#function, calculating the pressure for a certain temperature and chem. potentials

def p_range(T, compound, chem_pot):
    p_at = (96.485 * chem_pot - (enthalpy(compound, T) - enthalpy(compound, 0)) + (
                T * (entropy(compound, T) - entropy(compound, 0)) / 1000)) / (R * T)
    return p_at
